;;; my-vscode.el  -*- lexical-binding: t; -*-

;; TODO
;; C-d          | Select current word, or multi-cursor select next match
;; C-up/down    | Paragraph up/down, act different if selection is active
;; C-l          | Select line, or next line
;; C-backspace  | Smart delete left
;; M-backspace  | Smart delete right
;; C-y          | Smart yank
;; M-m          | Smart delete to char
;; C-M?         | Smart cut to char
;; C-enter      | Insert line below?

(cua-mode 1)

(bind-keys*
 ("C-<left>"  . qe-backward-word)
 ("C-<right>" . qe-forward-word)
 ("C-_" . my-comment-or-uncomment-region)
 ("C-k" . kill-whole-line)  ;; Should be C-K
 ("M-F" . my-indent)
 ("M-K" . kill-line)
 )

 ;; ("C-<down>"  . qe-forward-paragraph)
 ;; ("C-<up>"    . qe-backward-paragraph)
 ;; ("<delete>"    . delete-char)
 ;; ("<f1>"        . (lambda () (interactive) (flymake-goto-prev-error)))
 ;; ("<f2>"        . (lambda () (interactive) (flymake-goto-next-error)))
 ;; ("<f3>"        . my-fixme-prev)
 ;; ("<f4>"        . my-fixme-next)
 ;; ("C-/"         . dabbrev-expand)
 ;; ("C-M-_"       . my-tags-complete)
 ;; ("C-M-<left>"  . backward-sexp)
 ;; ("C-M-k"       . delete-region)
 ;; ("C-M-<right>" . forward-sexp)
 ;; ("C-M-t"       . my-transpose-sexps)
 ;; ("C-M-y"       . browse-kill-ring)
 ;; ("C-c $"       . my-delete-trailing-whitespace)
 ;; ("C-c ."       . my-kill-results-buffer)
 ;; ("C-c ;"       . my-line-comment)
 ;; ("C-c <"       . my-indent-shift-left)
 ;; ("C-c >"       . my-indent-shift-right)
 ;; ("C-c C"       . my-comment-region-after-copy)
 ;; ("C-c M"       . asic-compile)
 ;; ("C-c N"       . narrow-to-defun)
 ;; ("C-c T"       . my-tidy-lines)
 ;; ("C-c TAB"     . indent-region)
 ;; ("C-c U"       . (lambda () (interactive) (my-case-symbol 'upcase)))
 ;; ("C-c W"       . (lambda () (interactive) (jump-to-register ?w) (message "Restored window configuration")))
 ;; ("C-c c"       . my-comment-or-uncomment-region)
 ;; ("C-c i"       . insert-register)
 ;; ("C-c l"       . (lambda () (interactive) (my-case-symbol 'downcase)))
 ;; ("C-c m"       . my-compile)
 ;; ("C-c n"       . my-narrow)
 ;; ("C-c p"       . my-paste-mode)
 ;; ("C-c q"       . bury-buffer)
 ;; ("C-c r"       . revert-buffer)
 ;; ("C-c s"       . my-set-register)
 ;; ("C-c t"       . tidy)
 ;; ("C-c u"       . (lambda () (interactive) (my-case-symbol 'capitalize)))
 ;; ("C-c v"       . toggle-truncate-lines)
 ;; ("C-c w"       . (lambda () (interactive) (window-configuration-to-register ?w) (message "Saved window configuration")))
 ;; ("C-d"         . delete-forward-char)
 ;; ("C-h"         . backward-char)
 ;; ("C-l"         . forward-char)
 ;; ("C-x 5 n"     . set-frame-name)
 ;; ("C-x #"       . global-display-line-numbers-mode)
 ;; ("C-x %"       . my-toggle-window-split)
 ;; ("C-x ("       . kmacro-start-macro-or-insert-counter)
 ;; ("C-x -"       . my-win-split-vertically)
 ;; ("C-x C-c"     . my-kill-frame-or-emacs)
 ;; ("C-x C-n"     . other-window)
 ;; ("C-x C-p"     . (lambda () (interactive (other-window -1))))
 ;; ("C-x C-v"     . my-find-alternate-file)
 ;; ("C-x C-z"     . (lambda () (interactive) (ding)))
 ;; ("C-x E"       . my-apply-macro-to-region-lines)
 ;; ("C-x F"       . my-project-find-file-below)
 ;; ("C-x K"       . kill-buffer-and-window)
 ;; ("C-x M-q"     . my-toggle-buffer-modified)
 ;; ("C-x S"       . (lambda () "Shrink other window." (interactive) (shrink-window-if-larger-than-buffer (next-window))))
 ;; ("C-x SPC"     . fixup-whitespace)
 ;; ("C-x _"       . my-win-split-vertically-small)
 ;; ("C-x e"       . my-call-last-kbd-macro)
 ;; ("C-x f"       . project-find-file)
 ;; ("C-x s"       . shrink-window-if-larger-than-buffer)
 ;; ("C-x |"       . my-win-split-horizontally)
 ;; ("C-z"         . undo-only)
 ;; ("ESC <left>"  . (lambda () "Select previous frame." (interactive) (other-frame 1)))
 ;; ("ESC <right>" . (lambda () "Select next frame." (interactive) (other-frame -1)))
 ;; ("M-!"         . my-shell-command-on-current-file)
 ;; ("M-%"         . my-query-replace)
 ;; ("M-<f3>"     . (lambda () (interactive) (my-fixme-prev t)))
 ;; ("M-<f4>"     . (lambda () (interactive) (my-fixme-next t)))
 ;; ("M-="         . my-count-lines)
 ;; ("M-N"         . scroll-up-command)
 ;; ("M-P"         . scroll-down-command)
 ;; ("M-Q"         . my-unfill)
 ;; ("M-]"         . my-forward-paragraph)
 ;; ("M-`"         . next-error)
 ;; ("M-e"         . my-mc/edit-lines)
 ;; ("M-g"         . my-goto-line-column)
 ;; ("M-i"         . my-complete-switch-to-buffer)
 ;; ("M-q"         . my-fill)
 ;; ("M-s U"       . (lambda() (interactive) (unhighlight-regexp t)))
 ;; ("M-s h"       . my-highlight-regexp)
 ;; ("M-s u"       . unhighlight-regexp)
 ;; ("M-u"         . my-recenter)
 ;; ("M-z"         . redo)
 ;; ("M-~"         . previous-error))

(provide 'my-vscode)
