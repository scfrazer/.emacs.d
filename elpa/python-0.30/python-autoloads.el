;;; python-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from python.el

(defconst python--auto-mode-alist-regexp "\\(?:\\.\\(?:p\\(?:th\\|y[iw]?\\)\\)\\|/\\(?:SCons\\(?:\\(?:crip\\|truc\\)t\\)\\)\\)\\'")
(add-to-list 'auto-mode-alist (cons python--auto-mode-alist-regexp 'python-mode))
(add-to-list 'interpreter-mode-alist '("python[0-9.]*" . python-mode))
(autoload 'run-python "python" "\
Run an inferior Python process.

Argument CMD defaults to `python-shell-calculate-command' return
value.  When called interactively with `prefix-arg', it allows
the user to edit such value and choose whether the interpreter
should be DEDICATED to the current buffer or project.  When
numeric prefix arg is other than 0 or 4 do not SHOW.

For a given buffer and same values of DEDICATED, if a process is
already running for it, it will do nothing.  This means that if
the current buffer is using a global process, the user is still
able to switch it to use a dedicated one.

Runs the hook `inferior-python-mode-hook' after
`comint-mode-hook' is run.  (Type \\[describe-mode] in the
process buffer for a list of commands.)

(fn &optional CMD DEDICATED SHOW)" t)
(autoload 'python-add-import "python" "\
Add an import statement to the current buffer.

Interactively, ask for an import statement using all imports
found in the current project as suggestions.  With a prefix
argument, restrict the suggestions to imports defining the symbol
at point.  If there is only one such suggestion, act without
asking.

If the buffer does not belong to a project, the import statement is
searched under the buffer's default directory.  For example, if the file
is located directly under the home directory, all files under the home
directory will be searched.  Please note that this can take a long time
and may appear to hang.

When calling from Lisp, use a non-nil NAME to restrict the
suggestions to imports defining NAME.

(fn NAME)" t)
(autoload 'python-import-symbol-at-point "python" "\
Add an import statement for the symbol at point to the current buffer.
This works like `python-add-import', but with the opposite
behavior regarding the prefix argument." t)
(autoload 'python-remove-import "python" "\
Remove an import statement from the current buffer.

Interactively, ask for an import statement to remove, displaying
the imports of the current buffer as suggestions.  With a prefix
argument, restrict the suggestions to imports defining the symbol
at point.  If there is only one such suggestion, act without
asking.

(fn NAME)" t)
(autoload 'python-sort-imports "python" "\
Sort Python imports in the current buffer." t)
(autoload 'python-fix-imports "python" "\
Add missing imports and remove unused ones from the current buffer.

If there are missing imports, ask for an import statement using all
imports found in the current project as suggestions.  If there is only
one such suggestion, act without asking.

If the buffer does not belong to a project, the import statement is
searched under the buffer's default directory.  For example, if the file
is located directly under the home directory, all files under the home
directory will be searched.  Please note that this can take a long time
and may appear to hang." t)
(autoload 'python-base-mode "python" "\
Generic major mode for editing Python files.

This is a generic major mode intended to be inherited by
concrete implementations.  Currently there are two concrete
implementations: `python-mode' and `python-ts-mode'.

(fn)" t)
(autoload 'python-mode "python" "\
Major mode for editing Python files.

\\{python-mode-map}

(fn)" t)
(autoload 'python-ts-mode "python" "\
Major mode for editing Python files, using tree-sitter library.

\\{python-ts-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("/\\(?:Pipfile\\|\\.?flake8\\)\\'" . conf-mode))
(register-definition-prefixes "python" '("inferior-python-mode" "python-" "run-python-internal" "subword-mode"))

;;; End of scraped data

(provide 'python-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; python-autoloads.el ends here
