;;; modus-themes-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from modus-themes.el

(autoload 'modus-themes-contrast "modus-themes" "\
Measure WCAG contrast ratio between C1 and C2.
C1 and C2 are color values written in hexadecimal RGB.

(fn C1 C2)")
(autoload 'modus-themes-select "modus-themes" "\
Load a Modus THEME using minibuffer completion.
Run `modus-themes-after-load-theme-hook' after loading the theme.
Disable other themes per `modus-themes-disable-other-themes'.

(fn THEME)" t)
(autoload 'modus-themes-toggle "modus-themes" "\
Toggle between the two `modus-themes-to-toggle'.
If `modus-themes-to-toggle' does not specify two Modus themes,
prompt with completion for a theme among our collection (this is
practically the same as the `modus-themes-select' command).

Run `modus-themes-after-load-theme-hook' after loading the theme.
Disable other themes per `modus-themes-disable-other-themes'." t)
(function-put 'modus-themes-toggle 'interactive-only 't)
(autoload 'modus-themes-rotate "modus-themes" "\
Rotate to the next theme among THEMES.
When called interactively THEMES is the value of `modus-themes-to-rotate'
and REVERSE is the prefix argument.

If the current theme is already the next in line, then move to the one
after.  The rotation is performed rightwards if REVERSE is nil (the
default), and leftwards if REVERSE is non-nil.  Perform the rotation
such that the current element in the list becomes the last.  Do not
modify THEMES in the process.

(fn THEMES &optional REVERSE)" t)
(autoload 'modus-themes-load-random "modus-themes" "\
Load a Modus theme at random, excluding the current one.

With optional BACKGROUND-MODE as a prefix argument, prompt to limit the set of
themes to either dark or light variants.  When called from Lisp, BACKGROUND-MODE
is either the `dark' or `light' symbol.

Run `modus-themes-after-load-theme-hook' after loading a theme.

(fn &optional BACKGROUND-MODE)" t)
(autoload 'modus-themes-load-random-dark "modus-themes" "\
Load a random dark theme." t)
(function-put 'modus-themes-load-random-dark 'interactive-only 't)
(autoload 'modus-themes-load-random-light "modus-themes" "\
Load a random light theme." t)
(function-put 'modus-themes-load-random-light 'interactive-only 't)
(autoload 'modus-themes-theme "modus-themes" "\
Define a Modus theme or derivative thereof.
NAME is the name of the new theme.  FAMILY is the collection of themes
it belongs to.  DESCRIPTION is its documentation string.
BACKGROUND-MODE is either `dark' or `light', in reference to the theme's
background color.  The CORE-PALETTE, USER-PALETTE, and OVERRIDES-PALETTE
are symbols of variables which define palettes commensurate with
`modus-themes-operandi-palette'.

The optional CUSTOM-FACES and CUSTOM-VARIABLES are joined together with
the `modus-themes-faces' and `modus-themes-custom-variables',
respectively.  A derivative theme defining those is thus overriding what
the Modus themess have by default.

Consult the manual for details on how to build a theme on top of the
`modus-themes': Info node `(modus-themes) Build on top of the Modus themes'.

(fn NAME FAMILY DESCRIPTION BACKGROUND-MODE CORE-PALETTE USER-PALETTE OVERRIDES-PALETTE &optional CUSTOM-FACES CUSTOM-VARIABLES)" nil t)
(function-put 'modus-themes-theme 'lisp-indent-function 0)
(defvar modus-themes-include-derivatives-mode nil "\
Non-nil if Modus-Themes-Include-Derivatives mode is enabled.
See the `modus-themes-include-derivatives-mode' command
for a description of this minor mode.")
(custom-autoload 'modus-themes-include-derivatives-mode "modus-themes" nil)
(autoload 'modus-themes-include-derivatives-mode "modus-themes" "\
When enabled, all Modus themes commands cover derivatives as well.

Otherwise, they only consider the `modus-themes-items'.

Derivative theme projects can implement the equivalent of this minor
mode plus a method for `modus-themes-get-themes' to filter themes
accordingly.

This is a global minor mode.  If called interactively, toggle the
`Modus-Themes-Include-Derivatives mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value
\\='modus-themes-include-derivatives-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(when load-file-name (let ((dir (file-name-directory load-file-name))) (unless (equal dir (expand-file-name "themes/" data-directory)) (add-to-list 'custom-theme-load-path dir))))
(register-definition-prefixes "modus-themes" '("modus-themes-"))

;;; End of scraped data

(provide 'modus-themes-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; modus-themes-autoloads.el ends here
